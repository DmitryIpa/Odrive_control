1) Перепаять провода энкодеров (Success)
2) Нарастить провода фаз (Success)
3) Тестирование со  старой системой питания (Success, ничего не ебнуло)
4) Изменение цепи питания танка ()
5) ПАНКИ ГРЯЗИ НЕ БОЯТСЯ


#################################
ИНСТРУКЦИЯ ПО НАСТРОЙКЕ ДРАЙВЕРА:

ВНИМАНИЕ!!!!!!!
В ЦЕЛЯХ БОЛЕЕ ТОЧНОЙ КАЛИБРОВКИ ЭНКОДЕРОВ И МОТОРОВ КАЛИБРУЕМЫЙ МОТОР НЕ ДОЛЖЕН ТЕРЕТЬСЯ О ПОЛ (ПРИПОДНЯТЬ НУЖНО). И ОБЯЗАТЕЛЬНО СНЯТЬ ГУСЕНИЦЫ ПЕРЕД КАЛИБРОВКОЙ. ПОСЛЕ КАЛИБРОВКИ СТАВИМ ГУСЕНИЦЫ И ТЕСТИМ.
1) Запускаем команду ниже для того, чтобы вернуть параметры драйвера по умолчанию:
odrv0.erase_configuration()

2) Задаём параметры моторов для калибровки:
#мотор M0
odrv0.axis0.motor.config.current_control_bandwidth = 1000
odrv0.axis0.motor.config.pole_pairs = 8

#При подаче 48В напряжения на одрайв с лабораторника параметр задать на 24В. Если подавать напряжение с лабораторника 24В - уменьшить параметр в два раза
odrv0.axis0.motor.config.resistance_calib_max_voltage = 24

#остальные параметры мотора
odrv0.axis0.motor.config.calibration_current = 12
odrv0.axis0.motor.config.current_lim_margin = 8
odrv0.axis0.motor.config.requested_current_range = 60
odrv0.axis0.motor.config.torque_lim = "inf"
odrv0.axis0.motor.config.torque_constant = 2.2
odrv0.axis0.motor.config.motor_type = MotorType.HIGH_CURRENT

3) Задаём параметры энкодеров для калибровки
odrv0.axis0.encoder.config.bandwidth = 1000
odrv0.axis0.encoder.config.mode = ENCODER_MODE_HALL
odrv0.axis0.encoder.config.cpr = 8 * 6
odrv0.axis0.encoder.config.calib_scan_distance = 360

4) Настройка режима пинов энкодера. ОБЯЗАТЕЛЬНО ТРЕБУЕТСЯ для работы датчиков Холла. Иначе ничего не заработает. Ниже настраиваются энкодеры ОБОИХ моторов
odrv0.config.gpio9_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio10_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio11_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio12_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio13_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio14_mode = GPIO_MODE_DIGITAL


5) Настройка тормозного резистора. Включаем РЕЗИСТОР и задаём ему сопротивление в Омах
odrv0.config.enable_brake_resistor = True
odrv0.config.brake_resistance = 2

6) Контроллер. Я ПОИГРАЛСЯ С ПАРАМЕТРАМИ ПИ-РЕГУЛЯТОРА И ПОДОГНАЛ ДО ПРИЕМЛЕМОГО СОСТОЯНИЯ
odrv0.axis0.controller.config.pos_gain = 1
odrv0.axis0.controller.config.vel_gain = 2
odrv0.axis0.controller.config.vel_integrator_gain = 4
odrv0.axis0.controller.config.vel_limit = 12

7) Сохраняем все заданные параметры
odrv0.save_configuration()

8) Этап калибровки. 
8.1) Проверяем, чтобы параметры ниже имели значение False:
odrv0.axis0.motor.config.pre_calibrated
odrv0.axis0.encoder.config.pre_calibrated

8.2) Самый быстрый и хороший способ калибровки мотора и энкодера:
odrv0.axis0.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE 

#Что происходит? На блоке питания повышается ампераж (при 24В должен быть в пределах 1.5 - 2.5А). Далее звуковой сигнал драйвера, после чего двигатель начинает вращаться. Ждем, когда он повернется в обе стороны. Если двигатель замер в процессе вращения, то используем команду ниже, скринем и пишем ДимASSу по поводу этой проблемы.
dump_errors(odrv0)

#Если вы - молодец, то драйвер не выдаст ошибки в консоли, ДА ЕЩЁ И РАССЧИТЕТ ПАРАМЕТРЫ СОПРОТИВЛЕНИЯ ДВИГАТЕЛЯ И СМЕЩЕНИЯ ЭНКОДЕРА. Почти победа:

odrv0.axis0.motor

#Найдите следующие параметры:
error = 0x0000 (int)
phase_inductance = 0.00033594953129068017 (float)
phase_resistance = 0.1793474406003952 (float)

#И для энкодера тоже
odrv0.axis0.encoder

#Найти параметр
phase_offset_float = 0.5126956701278687 (float)

9)Последний этап. Сохранение параметров калибровки
9.1) Даём драйверу знать, что мотор и энкодер откалиброваны. Это требуется для того, чтобы при каждом запуске танка моторы не калибровались. Ибо оно нам и нафиг не надо.
odrv0.axis0.motor.config.pre_calibrated = True
odrv0.axis0.encoder.config.pre_calibrated = True

9.2) Сохраняем изменения
odrv0.save_configuration()

10) Тест. (Значение odrv0.axis0.controller.input_vel в диапазоне от -10 до 10)
10.1) Чтобы запустить двигатель, нужно ввести следующий набор параметров:
odrv0.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
odrv0.axis0.controller.config.control_mode = CONTROL_MODE_VELOCITY_CONTROL
odrv0.axis0.controller.input_vel = 10

odrv0.axis0.controller.input_vel = 0
odrv0.axis0.requested_state = AXIS_STATE_IDLE
odrv0.axis1.controller.input_vel = 0
odrv0.axis1.requested_state = AXIS_STATE_IDLE


10.2) ВРубаем максималочку и смотрим на ампераж блока питания. Если хотим, чтобы кроссовки получили производственную травму - начинаем нагружать вал двигателя ногой.
ВАЖНО!
#СУбботние посиделки дали мне понять, что параметр ниже не должен быть равен значению из спецификации.
#Я советую подогнать его таким образом, чтобы блок питания показывал ампераж в пределах 2.5А (Как указано в спецификации. Если хотим, чтобы мотор не грелся).
Если Сережа Боранчук узнал максимальный ток нагрузки для моторов танка, то подгоняем значение параметра odrv0.axis0.motor.config.current_lim так, чтобы блок питания показывал при нагрузке мотора ток, равный максимальному току нагрузки от Сережи. 

#Или можно воспользоваться этими субботними подборами:
мало. Это значит, что двигатель может легко заглохнуть вместе с гусеницами
odrv0.axis0.motor.config.current_lim = 10
оптимально. Значение тока нагрузки совпало со значением из спецификации мотора (~2.5А). Танк может медленно тронуться с места.
odrv0.axis0.motor.config.current_lim = 12
перебор. Значение тока нагрузки превышает значение из спецификации мотора на 1 - 1.5А. Танк должен поехать.
odrv0.axis0.motor.config.current_lim = 15

СТАВИМ 20 И РАДУЕМСЯ ЖИЗНИ
odrv0.axis0.motor.config.current_lim = 20

10.3) Сохраняем изменения odrv0.axis0.motor.config.current_lim
odrv0.save_configuration()

#Если что, перезагружаем драйвер
odrv0.reboot()

11) Аналогично для мотора на M1







#################################
ИНСТРУКЦИЯ ПО НАСТРОЙКЕ ВТОРОГО МОТОРА ДРАЙВЕРА:

ВНИМАНИЕ!!!!!!!
В ЦЕЛЯХ БОЛЕЕ ТОЧНОЙ КАЛИБРОВКИ ЭНКОДЕРОВ И МОТОРОВ КАЛИБРУЕМЫЙ МОТОР НЕ ДОЛЖЕН ТЕРЕТЬСЯ О ПОЛ (ПРИПОДНЯТЬ НУЖНО). И ОБЯЗАТЕЛЬНО СНЯТЬ ГУСЕНИЦЫ ПЕРЕД КАЛИБРОВКОЙ. ПОСЛЕ КАЛИБРОВКИ СТАВИМ ГУСЕНИЦЫ И ТЕСТИМ.

1) Запускаем команду ниже для того, чтобы вернуть параметры драйвера по умолчанию:
odrv0.erase_configuration()

2) Задаём параметры моторов для калибровки:
#мотор M1
odrv0.axis1.motor.config.current_control_bandwidth = 1000
odrv0.axis1.motor.config.pole_pairs = 8

#При подаче 48В напряжения на одрайв с лабораторника параметр задать на 24В. Если подавать напряжение с лабораторника 24В - уменьшить параметр в два раза
odrv0.axis1.motor.config.resistance_calib_max_voltage = 24

#остальные параметры мотора
odrv0.axis1.motor.config.calibration_current = 10
odrv0.axis1.motor.config.current_lim_margin = 8
odrv0.axis1.motor.config.requested_current_range = 60
odrv0.axis1.motor.config.torque_lim = "inf"
odrv0.axis1.motor.config.torque_constant = 2.2
odrv0.axis1.motor.config.motor_type = MotorType.HIGH_CURRENT

3) Задаём параметры энкодеров для калибровки
odrv0.axis1.encoder.config.bandwidth = 1000
odrv0.axis1.encoder.config.mode = ENCODER_MODE_HALL
odrv0.axis1.encoder.config.cpr = 8 * 6
odrv0.axis1.encoder.config.calib_scan_distance = 360

4) Настройка режима пинов энкодера. ОБЯЗАТЕЛЬНО ТРЕБУЕТСЯ для работы датчиков Холла. Иначе ничего не заработает. Ниже настраиваются энкодеры ОБОИХ моторов
odrv0.config.gpio9_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio10_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio11_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio12_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio13_mode = GPIO_MODE_DIGITAL
odrv0.config.gpio14_mode = GPIO_MODE_DIGITAL


5) Настройка тормозного резистора. Включаем РЕЗИСТОР и задаём ему сопротивление в Омах
odrv0.config.enable_brake_resistor = True
odrv0.config.brake_resistance = 2

6) Контроллер. Я ПОИГРАЛСЯ С ПАРАМЕТРАМИ ПИ-РЕГУЛЯТОРА И ПОДОГНАЛ ДО ПРИЕМЛЕМОГО СОСТОЯНИЯ
odrv0.axis1.controller.config.pos_gain = 1
odrv0.axis1.controller.config.vel_gain = 2
odrv0.axis1.controller.config.vel_integrator_gain = 4
odrv0.axis1.controller.config.vel_limit = 12

7) Сохраняем все заданные параметры
odrv0.save_configuration()

8) Этап калибровки. 
8.1) Проверяем, чтобы параметры ниже имели значение False:
odrv0.axis1.motor.config.pre_calibrated
odrv0.axis1.encoder.config.pre_calibrated

8.2) Самый быстрый и хороший способ калибровки мотора и энкодера:
odrv0.axis1.requested_state = AXIS_STATE_FULL_CALIBRATION_SEQUENCE 

#Что происходит? На блоке питания повышается ампераж (при 24В должен быть в пределах 1.5 - 2.5А). Далее звуковой сигнал драйвера, после чего двигатель начинает вращаться. Ждем, когда он повернется в обе стороны. Если двигатель замер в процессе вращения, то используем команду ниже, скринем и пишем ДимASSу по поводу этой проблемы.
dump_errors(odrv0)

#Если вы - молодец, то драйвер не выдаст ошибки в консоли, ДА ЕЩЁ И РАССЧИТЕТ ПАРАМЕТРЫ СОПРОТИВЛЕНИЯ ДВИГАТЕЛЯ И СМЕЩЕНИЯ ЭНКОДЕРА. Почти победа:

odrv0.axis1.motor

#Найдите следующие параметры:
error = 0x0000 (int)
phase_inductance = 0.00033594953129068017 (float)
phase_resistance = 0.1793474406003952 (float)

#И для энкодера тоже
odrv0.axis1.encoder

#Найти параметр
phase_offset_float = 0.5126956701278687 (float)

9)Последний этап. Сохранение параметров калибровки
9.1) Даём драйверу знать, что мотор и энкодер откалиброваны. Это требуется для того, чтобы при каждом запуске танка моторы не калибровались. Ибо оно нам и нафиг не надо.
odrv0.axis1.motor.config.pre_calibrated = True
odrv0.axis1.encoder.config.pre_calibrated = True

9.2) Сохраняем изменения
odrv0.save_configuration()

10) Тест. (Значение odrv0.axis0.controller.input_vel в диапазоне от -10 до 10)
10.1) Чтобы запустить двигатель, нужно ввести следующий набор параметров:
odrv0.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
odrv0.axis1.controller.config.control_mode = CONTROL_MODE_VELOCITY_CONTROL
odrv0.axis1.controller.input_vel = 10

odrv0.axis0.controller.input_vel = 0
odrv0.axis0.requested_state = AXIS_STATE_IDLE
odrv0.axis1.controller.input_vel = 0
odrv0.axis1.requested_state = AXIS_STATE_IDLE

10.2) ВРубаем максималочку и смотрим на ампераж блока питания. Если хотим, чтобы кроссовки получили производственную травму - начинаем нагружать вал двигателя ногой.
ВАЖНО!
#СУбботние посиделки дали мне понять, что параметр ниже не должен быть равен значению из спецификации.
#Я советую подогнать его таким образом, чтобы блок питания показывал ампераж в пределах 2.5А (Как указано в спецификации. Если хотим, чтобы мотор не сгорел).
Если Сережа Боранчук узнал максимальный ток нагрузки для моторов танка, то подгоняем значение параметра odrv0.axis0.motor.config.current_lim так, чтобы блок питания показывал при нагрузке мотора ток, равный максимальному току нагрузки от Сережи.

#Или можно воспользоваться этими субботними подборами:
мало. Это значит, что двигатель может легко заглохнуть вместе с гусеницами
odrv0.axis1.motor.config.current_lim = 10
оптимально. Значение тока нагрузки совпало со значением из спецификации мотора (~2.5А). Танк может медленно тронуться с места.
odrv0.axis1.motor.config.current_lim = 12
перебор. Значение тока нагрузки превышает значение из спецификации мотора на 1 - 1.5А. Танк должен поехать.
odrv0.axis1.motor.config.current_lim = 15

СТАВИМ 20 И РАДУЕМСЯ ЖИЗНИ
odrv0.axis1.motor.config.current_lim = 20

10.3) Сохраняем изменения odrv0.axis0.motor.config.current_lim
odrv0.save_configuration()

#Если что, перезагружаем драйвер
odrv0.reboot()




//ТЕСТ ДЛЯ ЛАСТ. Работает невнятно. ДИАПАЗОН ЛАСТ от 0 - 6 У.Е - один оборот

odrv0.axis0.controller.config.pos_gain = 0.75
odrv0.axis0.controller.config.vel_gain = 0.5
odrv0.axis0.controller.config.vel_integrator_gain = 2
odrv0.axis0.controller.config.vel_limit = 12

odrv0.axis0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
odrv0.axis0.controller.config.control_mode = CONTROL_MODE_POSITION_CONTROL
odrv0.axis0.controller.input_pos = 2

//ИЛИ ТАК
odrv0.axis1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
odrv0.axis1.controller.config.control_mode = CONTROL_MODE_POSITION_CONTROL
odrv0.axis1.controller.input_pos = 2

Задача. На роботе с танковым приводом установлен двигатель, который управляет так называемой ластой, изменяющей угол наклона танка, подобно домкрату. Требуется разработать в среде Python скрипт для управления двигателем в режиме позиционного управления. Один оборот шестерни составляет 6 тиков. Также требуется разработать ПИД-регулятор на языке Python для управления положением двигателя. Для этого желательно использовать зависимость по положению (энкодеру) и току (если на двигатель прикладывается большая нагрузка). По каким ещё параметрам двигателя можно разработать пид-регулятор?

